======================================================================
理解密钥对/数字签名 PGP GnuPG OpenPGP SSHKeys
======================================================================

:slug: understand_key_pairs
:date: 2020-08-20 18:55
:tags: pgp, gpg, security, openpgp, ssh
:description: 
:status: draft
:noindent: true

.. contents::

简述
====================

* PGP (Pretty Good Privacy) 用于信息的加密和验证，是商业应用程序。
* GnuPG (GNU Privacy Guard) 也用于信息的加密和验证，并可用于管理不对称密钥对，是自由软件。
* OpenPGP 是一个加密标准，最早从 PGP 中抽离出来，目前 GnuPG 和 PGP 都执行此标准。
* SSH Keys 就是对上述软件所生成的不对称密钥对的应用。

这里主要就整理两个， GnuPG 的公钥加密和其密钥对的应用。 

GnuPG
====================

通常直接喊 GPG， Archlinux 下执行 :code:`pacman -S gnupg` 进行安装。

概念
------------------------------

对称加密
  使用协商好的密码来加密和解密信息，只要这个密码使用了足够合适的算法且确保密码没有泄漏，那么这种加密的安全性是非常好的。

公钥密码（不对称加密/密钥对）
  最早用于解决对称加密密码交换问题，分公钥和私钥，私钥只由所有者保存，公钥可以发送给任何人。其基于单向陷门函数，也就是，正向运算是很容易算出结果的，但是已知结果想要知道其原始信息，如果没有私钥的话，就会无比艰难。

数字签名
  | 哈希函数是一个多对一的函数，各种不同的输入值会对应某一个有限集合中的值，通常这个有限集合是自然数集合。文档的数字签名就是用哈希函数来求值这个文档，当然，为了使得数字签名可用，这个哈希函数需要满足两点：一、要非常难找出两个不同的文档对应同样的哈希值；二、通过哈希值来恢复原始文档要非常难。
  | 为了避免生成的哈希值被篡改，目前采用的方式是，使用公钥密码来单独对签名进行加密，即，签名者使用其私钥加密哈希值，接收者使用签名者的公钥来验证这个加密后的哈希值，再用验证后的哈希值来验证信息/文档是否被篡改。


密钥管理
------------------------------

好的密钥管理的关键是确保自己和他人的密钥环的正确与完整，GnuPG 使用签名密钥来做到这些，即达成两个目的：1）可以检测对密钥环进行的篡改；2）确保密钥属密钥上所显示的用户ID所有。

.. code-block::

                       +-- 主签名密钥的公共部分              -\__
           +--　公钥 ---+-- 从属的 签名和加密子密钥 的公共部分  -/ ``-- （包含了密钥ID，创建和过期时间等数据）
           |           +-- 关联此公钥的真人用户名　　         ------- （真人的名字，可选的备注信息以及邮箱地址）
  密钥对 ---+
           +--　私钥 ---+-- 主签名密钥的私有部分              -\__
                       +-- 从属的 签名和加密子密钥 的私有部分  -/ ``-- （包含了密钥ID，创建和过期时间等数据）

为了解决公钥被篡改的问题，可以使用私钥对公钥数据进行签名，这样，就会只有对应的公钥才能解密公钥部分的数据，保证不会有部分数据被篡改。