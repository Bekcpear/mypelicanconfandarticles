==================================================
【笔记】 Effective go
==================================================

:slug: note_of_effective_go
:date: 2019-03-13 10:50
:tags: golang, note
:description: Effective go (https://golang.org/doc/effective_go.html) 的笔记
:noindent: true
:status: draft

.. contents::

格式化
==========================================

拥有自动格式化工具 :code:`gofmt` ，使用 tab 作为缩进符，行长不限但最好分行，更好的括号。

注释
==========================================

行注释 :code:`//` 和 块注释 :code:`/* */`

`godoc`_ 可以把包对应的注释导出成文档。这些注释是在顶层声明之前的，没有空白行来干扰的。

注释为未解释的纯文本，所以 HTML 和如 :code:`_this_` 这样的其它注解会被解释后复现，不要在注释里面使用。

程序中每一个暴露的名字都应该要有一个文档注释

文档注释首局应当是以需要被解释的名字开头的一句话。这样子就可以结合 :code:`grep` 命令快速查看到需要的文档。

Names
==========================================

包名总是小写单一单词

尽量避免使用 :code:`import .` 格式，因为 :code:`bufio.Reader` 这种调用更加清晰且不会冲突

包名总是其源文件所在目录名

更长的名字不会使得事情更加具有可读性，一个好的注释会更加有效

Getters
----------------------------------------------------------

getters 和 setters 在 go 里不自动支持，推荐手动添加

Get 不应该出现在 getters 的名字中，如果一个字段为小写的 :code:`owner` 那么其 getter 应为首位大写的 :code:`Owner` 而 setter 为 :code:`SetOwner`

Interface names
----------------------------------------------------------

单一方法的接口一般是其方法名再添上 er 后缀

不要命名方法名为 :code:`Read, Write, Close, Flush, String` 这种有标准签名和意义的，除非你的方法有相同的签名和意义。

但如果类型的实现的方法和标准的方法同签名和意义，那么要使用相同的名字。比如字符串转换方式使用 :code:`String` 而不是 :code:`ToString`

MixedCaps
----------------------------------------------------------

使用 :code:`MixedCaps` 或 :code:`mixedCaps` 这种格式书写多个单词，不要使用下划线。

分号
==========================================

看 `Go 编程语言规范:分号`_ 

控制结构
==========================================

相对于 C 而言，多了 type switch；判断语句两边没有括号，所以主体需要使用花括号包裹。

其它看 `Go 编程语言规范:语句`_

Data
==========================================

new 和 make，

new 会分配一个内存空间，并把这个空间都归为 **零** （而不是按照一定规则初始化它），然后返回这个内存的地址。因为是零值，所以可以直接使用它，这很方便。

与 C 不同，返回本地变量的地址是可行的，变量会在函数返回后继续存在。

传递数组到一个函数，传递其实是数组的副本，而不是到该数组的指针。




7
==========================================

8
==========================================

.. _`godoc`: https://go.googlesource.com/tools
.. _`Go 编程语言规范:分号`: https://moego.me/golang_spec.html#id9
.. _`Go 编程语言规范:语句`: https://moego.me/golang_spec.html#id198
