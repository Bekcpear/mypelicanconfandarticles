//refer ./service-worker.tmpl
'use strict';
var precacheConfig = <%= precacheConfig %>;
var cacheName = 'sw-precache-bitbili-net';
<% if (handleFetch) { %>
var ignoreUrlParametersMatching = [<%= ignoreUrlParametersMatching %>];
<% } %>
<% Object.keys(externalFunctions).sort().forEach(function(functionName) {%>
var <%- functionName %> = <%= externalFunctions[functionName] %>;
<% }); %>
var hashParamName = '_sw-precache';
var urlsToCacheKeys = new Map(
  precacheConfig.map(function(item) {
    var relativeUrl = item[0];
    var hash = item[1];
    var absoluteUrl = new URL(relativeUrl, self.location);
    var cacheKey = createCacheKey(absoluteUrl, hashParamName, hash, <%= dontCacheBustUrlsMatching %>);
    return [absoluteUrl.toString(), cacheKey];
  })
);
function setOfCachedUrls(cache) {
  return cache.keys().then(function(requests) {
    return requests.map(function(request) {
      return request.url;
    });
  }).then(function(urls) {
    return new Set(urls);
  });
}
self.addEventListener('install', function(event) {
  console.log("  SERVICEWORKER installing...");
  event.waitUntil(
    caches.open(cacheName).then(function(cache) {
      return setOfCachedUrls(cache).then(function(cachedUrls) {
        return Promise.all(
          Array.from(urlsToCacheKeys.values()).map(function(cacheKey) {
            if (!cachedUrls.has(cacheKey)) {
              var request = new Request(cacheKey, {credentials: 'same-origin'});
              return fetch(request).then(function(response) {
                if (!response.ok) {
                  throw new Error('Request for ' + cacheKey + ' returned a ' +
                    'response with status ' + response.status);
                }
                return cleanResponse(response).then(function(responseToCache) {
                  return cache.put(cacheKey, responseToCache);
                });
              });
            }
          })
        );
      });
    }).then(function() {
      <% if (skipWaiting) { %>
      console.log("  SERVICEWORKER installed and skiping installing state...");
      return self.skipWaiting();
      <% } %>
    })
  );
});
self.addEventListener('activate', function(event) {
  console.log("  SERVICEWORKER activating...");
  var setOfExpectedUrls = new Set(urlsToCacheKeys.values());
  event.waitUntil(
    caches.open(cacheName).then(function(cache) {
      return cache.keys().then(function(existingRequests) {
        return Promise.all(
          existingRequests.map(function(existingRequest) {
            if (!setOfExpectedUrls.has(existingRequest.url)) {
              return cache.delete(existingRequest);
            }
          })
        );
      });
    }).then(function() {
      <% if (clientsClaim) { %>
      return self.clients.claim().then(function() {
        console.log("  SERVICEWORKER installation and activation successful, all clients have been controlled.");
        self.clients.matchAll().then(function (clients){
          clients.forEach(function(client){
            client.postMessage({
              msg: "newInstalled",
            });
          });
        });
      });
      <% } %>
    })
  );
});
<% if (handleFetch) { %>
self.addEventListener('fetch', function(event) {
  if (event.request.method === 'GET') {
    var shouldRespond;
    var url = stripIgnoredUrlParameters(event.request.url, ignoreUrlParametersMatching);
    shouldRespond = urlsToCacheKeys.has(url);
    var directoryIndex = '<%= directoryIndex %>';
    if (!shouldRespond && directoryIndex) {
      url = addDirectoryIndex(url, directoryIndex);
      shouldRespond = urlsToCacheKeys.has(url);
    }
    var navigateFallback = '<%= navigateFallback %>';
    if (!shouldRespond && (event.request.mode === 'navigate')) {
      event.respondWith(
        fetch(event.request).then((response) => {
          if (response) return response;
        }).catch((err) => {
          if (navigateFallback) {
            url = new URL(navigateFallback, self.location).toString();
            return caches.open(cacheName).then((cache) => {
              return cache.match(urlsToCacheKeys.get(url)).then((response) => {
                if (response) return response;
              }).catch((e) => {
                console.warn('  SERVICEWORKER couldn\'t serve response for "%s" from cache: %O', url, e);
                return new Response('Error');
              });
            }).catch((e) => {
              console.warn('  SERVICEWORKER couldn\'t serve response for "%s" from cache: %O', url, e);
              return new Response('Error');
            });
          } else {
            return new Response('Error');
          }
        })
      );
    }
    if (shouldRespond) {
      event.respondWith(
        caches.open(cacheName).then(function(cache) {
          return cache.match(urlsToCacheKeys.get(url)).then(function(response) {
            if (response) {
              return response;
            }
            throw Error('The cached response that was expected is missing.');
          });
        }).catch(function(e) {
          console.warn('  SERVICEWORKER couldn\'t serve response for "%s" from cache: %O', event.request.url, e);
          return fetch(event.request);
        })
      );
    }
  }
});
  <% if (swToolboxCode) { %>
<%= swToolboxCode %>
  <% } %>
  <% if (runtimeCaching) { %>
<%= runtimeCaching %>
  <% } %>
<% } %>
<% if (importScripts) { %>
importScripts(<%= importScripts %>);
<% } %>
